<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.iclass.wos.mapper.UserAccountMapper">

<!-- 	기존 로그인 기능 보존
<select id="login" parameterType="UserAccountDto" resultType="UserAccountDto">
		SELECT * FROM USERS WHERE ID=#{id} AND PASSWORD =#{password}
	</select>
 -->
 
	<!-- 아이디로 권한 찾기 -->
    <select id="findRoleById" parameterType="string" resultType="string">
        SELECT role
        FROM USERS
        WHERE id = #{id}
    </select>

    <!-- 아이디로 사용자 찾기 -->
    <select id="findById" parameterType="string" resultType="UserAccountDto">
        SELECT * FROM USERS WHERE id = #{id}
    </select>
    
    <!-- 닉네임으로 사용자 찾기 -->
    <select id="findByNickname" parameterType="string" resultType="UserAccountDto">
        SELECT * FROM USERS WHERE nickname = #{nickname}
    </select>
    
    <!-- 로그인 (참고: 비밀번호 검증은 이제 Service에서 BCrypt로 수행) -->
    <select id="login" parameterType="UserAccountDto" resultType="UserAccountDto">
        SELECT * FROM USERS WHERE id = #{id}
    </select>
 
	<!-- 아이디로 닉네임 찾기 -->
    <select id="findNicknameById" parameterType="string" resultType="string">
        SELECT nickname
        FROM USERS
        WHERE id = #{id}
    </select>
    
     <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="UserRegisterDto">
        INSERT INTO USERS (
            id, password, nickname, email, join_date, status, role,
            profile_image_url, address, phone
        ) VALUES (
            #{id},
            #{password}, <!-- 이미 BCrypt로 암호화된 비밀번호 -->
            #{nickname},
            #{email},
            CURRENT_TIMESTAMP,
            'Y',
            'USER',
            NULL,
            #{address, jdbcType=VARCHAR},
            #{phone, jdbcType=VARCHAR}
        )
    </insert>
    
    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE USERS 
        SET password = #{password}
        WHERE id = #{id}
    </update>
    
    <!-- 프로필 이미지 URL 업데이트 -->
    <update id="updateProfileImage">
        UPDATE USERS
        SET profile_image_url = #{profileImageUrl}
        WHERE id = #{id}
    </update>
    
    <!-- 사용자 정보 업데이트 -->
    <update id="updateUser" parameterType="UserAccountDto">
        UPDATE USERS
        SET 
            nickname = #{nickname},
            email = #{email, jdbcType=VARCHAR},
            <if test="password != null and password != ''">
            password = #{password},
            </if>
            profile_image_url = #{profile_image_url, jdbcType=VARCHAR},
            address = #{address, jdbcType=VARCHAR},
            phone = #{phone, jdbcType=VARCHAR},
            last_login = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>
	
</mapper>